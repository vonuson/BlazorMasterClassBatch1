@page "/lifecyle"
@implements IDisposable

<h3>Parent</h3>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<div class="card mb-2 bg-secondary mt-2">
    <div class="card-body">
        <LifeCycleChild Param="@currentCount.ToString()"></LifeCycleChild>
    </div>
</div>

@foreach (var (method, index) in LifeCycleMethods.Select((item, index) => (item, index)))
{
    <div class="card mb-2">
        <div class="card-body">
            <p>@index - @method</p>
        </div>
    </div>
}

@code {

    List<string> LifeCycleMethods = new();

    private int currentCount = 0;

    private Timer timer;

    private async Task IncrementCount()
    {
        currentCount++;

        await Task.Delay(500);
        currentCount++;
        StateHasChanged();

        await Task.Delay(500);
        currentCount++;
        StateHasChanged();

        await Task.Delay(500);
        currentCount++;
        StateHasChanged();

        await Task.Delay(500);
        currentCount++;
        StateHasChanged();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        LifeCycleMethods.Add("SetParametersAsync is called");

        return base.SetParametersAsync(parameters);
    }

    private void OnTimerCallback(object? state)
    {
        Console.WriteLine("OnTimerCallback is called");
    }

    protected override void OnInitialized()
    {
        timer = new Timer(OnTimerCallback, null, 1000, 500);

        LifeCycleMethods.Add("OnInitialized is called");
    }

    protected override Task OnInitializedAsync()
    {
        LifeCycleMethods.Add("OnInitializedAsync is called");

        return Task.FromResult(0);
    }

    protected override void OnParametersSet()
    {
        LifeCycleMethods.Add("OnParametersSet is called");
    }

    protected override Task OnParametersSetAsync()
    {
        LifeCycleMethods.Add("OnParametersSetAsync is called");

        return Task.FromResult(0);
    }

    void IDisposable.Dispose()
    {
        timer.Dispose();
    }
}